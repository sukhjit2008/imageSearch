{"version":3,"sources":["components/layout/header.js","components/images/images.js","components/dashboard/dashboard.js","App.js","serviceWorker.js","index.js"],"names":["header","props","react_default","a","createElement","className","href","images","imageList","class","map","image","src","urls","regular","key","id","alt","Dashboard","state","term","changeHandler","e","_this","setState","target","value","submitHandler","preventDefault","searchTerm","axios","get","params","query","headers","Authorization","then","response","data","results","onSubmit","this","htmlFor","type","onChange","components_images_images","isLoading","Component","App","layout_header","dashboard","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yOAWeA,EATD,SAACC,GACX,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACfH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,IAAID,UAAU,sBAAtB,qBC4BGE,EAhCD,SAACN,GACX,IAAIO,EAAYN,EAAAC,EAAAC,cAAA,oBAyBhB,OAxBDH,EAAMM,SACLC,EAAYN,EAAAC,EAAAC,cAAA,WACZF,EAAAC,EAAAC,cAAA,OAAKK,MAAM,iDACPP,EAAAC,EAAAC,cAAA,OAAKK,MAAM,mCACXP,EAAAC,EAAAC,cAAA,OAAKK,MAAM,uBACPP,EAAAC,EAAAC,cAAA,OAAKK,MAAM,YACTP,EAAAC,EAAAC,cAAA,OAAKK,MAAM,aACbP,EAAAC,EAAAC,cAAA,OAAKK,MAAM,YACTP,EAAAC,EAAAC,cAAA,OAAKK,MAAM,wBACbP,EAAAC,EAAAC,cAAA,OAAKK,MAAM,gBAMnBR,EAAMM,SACNC,EAAUP,EAAMM,OAAOG,IACnB,SAACC,GACC,OACOT,EAAAC,EAAAC,cAAA,OAAMQ,IAAKD,EAAME,KAAKC,QAASC,IAAKJ,EAAMK,GAAIX,UAAU,gCAAgCY,IAAI,QAMrGf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACdG,qBCuBMU,6MA/CZC,MAAM,CACJC,KAAK,GACLb,OAAO,QAGTc,cAAc,SAACC,GACdC,EAAKC,SAAS,CAACJ,KAAKE,EAAEG,OAAOC,WAG9BC,cAAc,SAACL,GACdA,EAAEM,iBACF,IAAMC,EAAaN,EAAKJ,MAAMC,KAC9BU,IAAMC,IAAI,yCAAyC,CACjDC,OAAO,CAACC,MAAMJ,GACdK,QAAQ,CACNC,cAAc,gFAEfC,KACD,SAACC,GACAd,EAAKC,SAAS,CAACjB,OAAO8B,EAASC,KAAKC,YAIvChB,EAAKC,SAAS,CAACJ,KAAK,8EAGpB,OACElB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qCACXH,EAAAC,EAAAC,cAAA,QAAMoC,SAAUC,KAAKd,eACnBzB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACfH,EAAAC,EAAAC,cAAA,SAAOsC,QAAQ,SAAf,mCACAxC,EAAAC,EAAAC,cAAA,SAAOY,GAAG,QAAQ2B,KAAK,OAAQjB,MAAOe,KAAKtB,MAAMC,KAAMwB,SAAUH,KAAKpB,iBAEtEnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACfH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,wCAAlB,aAKJH,EAAAC,EAAAC,cAACyC,EAAD,CAAStC,OAAQkC,KAAKtB,MAAMZ,OAAQuC,UAAWL,KAAKtB,MAAM2B,oBAzC3CC,aCaVC,mLATX,OACE9C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC6C,EAAD,MACA/C,EAAAC,EAAAC,cAAC8C,EAAD,cALUH,aCKEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,KAAK,SAAA4B,GACjCA,EAAaC","file":"static/js/main.c39e1202.chunk.js","sourcesContent":["import React from 'react';\n\nconst header =(props)=>{\n    return(\n        <nav className=\"Header teal lighten-2 \">\n            <div className=\"container\">\n            <a href=\"/\" className=\"brand-logo center \">Search Images </a>\n            </div>\n        </nav>\n    )\n}\nexport default header;","import React from 'react';\n\nconst images =(props)=>{\n    var imageList = <h5>Images</h5>\nif(props.images ){\n    imageList = <div>\n    <div class=\"preloader-wrapper big active container center\">\n        <div class=\"spinner-layer spinner-blue-only\">\n        <div class=\"circle-clipper left\">\n            <div class=\"circle\"></div>\n        </div><div class=\"gap-patch\">\n            <div class=\"circle\"></div>\n        </div><div class=\"circle-clipper right\">\n            <div class=\"circle\"></div>\n        </div>\n        </div>\n </div>\n  </div>\n}\n if(props.images){\n    imageList=props.images.map(\n        (image)=>{\n          return  (\n                 <img  src={image.urls.regular} key={image.id} className=\" responsive-img materialboxed\" alt=\"\"/>\n          );\n        }\n    )\n }\n    return(\n        <div className='images container section '>\n        {imageList }\n        </div>\n    );\n}\nexport default images;","import React, { Component } from 'react'\nimport Images from '../images/images';\nimport axios from 'axios';\n\n\n class Dashboard extends Component {\n   state={\n     term:'',\n     images:null\n   }\n   \n   changeHandler=(e)=>{\n    this.setState({term:e.target.value});\n  \n   }\n   submitHandler=(e)=>{\n    e.preventDefault();\n    const searchTerm = this.state.term;\n    axios.get('https://api.unsplash.com/search/photos',{\n      params:{query:searchTerm},\n      headers:{\n        Authorization:'Client-ID 8baf756fd48ee56cc641103d303070dd10e96ab51b4970d6c72f8888064d8696'\n      }\n    }).then(\n      (response)=>{\n       this.setState({images:response.data.results});\n      }\n    );\n     \n    this.setState({term:''});\n   }\n  render() {\n    return (\n      <div>\n        <div className=\" Dashboard row section container \">\n            <form onSubmit={this.submitHandler}>\n              <div className=\"input-field col s10  l10  \">\n              <label htmlFor=\"image\">Enter name to search for images</label>\n              <input id=\"image\" type=\"text\"  value={this.state.term} onChange={this.changeHandler}/>\n              </div>\n              <div className=\"input-field col l2  \">\n              <button className=\" Button waves-effect waves-light btn\" >Search</button>\n              </div>\n            </form>\n          </div>\n          \n          <Images  images={this.state.images} isLoading={this.state.isLoading}/>\n      </div>\n    )\n  }\n}\n\n\nexport default Dashboard;","import React, { Component } from 'react';\nimport Header from './components/layout/header';\nimport Dashboard from './components/dashboard/dashboard';\n\n\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div >\n        <Header />\n        <Dashboard />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}